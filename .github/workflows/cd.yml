name: Build release
on:
  push:
    branches:
      - stable
      - master
      - deploy
    paths:
      - "config/**"
      - "lib/**"
      - "priv/**"
      - "rel/**"
      - "test/**"
      - "**/*.ex"
      - "**/*.exs"
      - "mix.lock"
      - ".github/workflows/cd.yml"
      - "!config/*.example"
env:
  TIME: ${{ github.event.repository.pushed_at }}

jobs:
  ci:
    name: Build release
    runs-on: ubuntu-20.04
    env:
      MIX_ENV: prod
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ELIXIR_VERSION: 1.13.4
      OTP_VERSION: 25.3.2
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache deps
        uses: actions/cache@v2
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: |
            ${{ runner.os }}-mix-
      - name: Cache _build
        uses: actions/cache@v2
        with:
          path: |
            _build
            !_build/prod/cadet-0.0.1.tar.gz
          key: cd-${{ github.ref_name }}-${{ runner.os }}-erlang-${{ env.OTP_VERSION }}-elixir-${{ env.ELIXIR_VERSION }}-${{ github.sha }}
          restore-keys: |
            cd-${{ github.ref_name }}-${{ runner.os }}-erlang-${{ env.OTP_VERSION }}-elixir-${{ env.ELIXIR_VERSION }}-
      - name: Setup Elixir
        uses: erlef/setup-elixir@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
      - name: mix deps.get
        run: |
          mix deps.get
      - name: mix release
        run: mix release --overwrite
      - name: "[Release] Generate tag name"
        id: release_tag
        env:
          OVERWRITE: ${{ github.ref_name == 'master' }}
        run: |
          if [ "$OVERWRITE" = "true" ]; then
            echo "TAG=latest-${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "TAG=$(echo release-${{ env.TIME }})" >> "$GITHUB_OUTPUT"
          fi
      - name: "[Release] Generate release title"
        id: release_title
        run: |
          echo "TITLE=$(date +"Workflow on %a, %-d %b %H:%M %Z from ${{ github.ref_name }}" -d @${{ env.TIME }})" >> "$GITHUB_OUTPUT"
      - name: "[Release] Generate release body"
        id: release_body
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "BODY<<$EOF" >> "$GITHUB_OUTPUT"
          echo "## Commits" >> "$GITHUB_OUTPUT"
          echo "" >> "$GITHUB_OUTPUT"
          echo "Changes since last release on branch \`${{ github.ref_name }}\`:" >> "$GITHUB_OUTPUT"
          echo "" >> "$GITHUB_OUTPUT"
          git log --format=oneline latest-${{ github.ref_name }}..HEAD | sed 's/^\([0-9a-f]*\)/* \1:/' >> "$GITHUB_OUTPUT"
          echo "$EOF" >> "$GITHUB_OUTPUT"
      - name: "[Release] Create on GitHub"
        id: release_create # We need the id to refer to it in the next step
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_tag.outputs.TAG }}
          release_name: ${{ steps.release_title.outputs.TITLE }}
          body: ${{ steps.release_body.outputs.BODY }}
          prerelease: ${{ github.ref_name == 'master' }}
      - name: "[Release] Update latest-branch tag"
        run: |
          git tag -f latest-${{ github.ref_name }}
          git push --tags -f
      - name: "[Release] Upload files"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_create.outputs.upload_url }}
          asset_path: ./_build/prod/cadet-0.0.1.tar.gz
          asset_name: cadet-0.0.1.tar.gz
          asset_content_type: application/gzip
