import Config

config :cadet,
  identity_providers: %{
    # If you are just doing development, you can simply use the test provider
    # below. You only need to use ADFS or OpenID if you are deploying to
    # production.

    # # To use authentication with NUS's ADFS instance.
    # "nusnet_id" => {Cadet.Auth.Providers.ADFS, %{token_endpoint: "https://my-adfs/adfs/oauth2/token"}},
    # # An example of OpenID authentication with Cognito. Any OpenID-compliant
    # # provider should work.
    # "cognito" =>
    #   {Cadet.Auth.Providers.OpenID,
    #    %{
    #      # This should match a key in openid_connect_providers below
    #      openid_provider: :cognito,
    #      # You may need to write your own claim extractor for other providers
    #      claim_extractor: Cadet.Auth.Providers.CognitoClaimExtractor
    #    }},
    # # To use authentication with GitHub
    # "github" =>
    #   {Cadet.Auth.Providers.GitHub,
    #    %{
    #       # A map of GitHub client_id => client_secret
    #       clients: %{
    #         "client_id" => "client_secret"
    #       },
    #       token_url: "https://github.com/login/oauth/access_token",
    #       user_api: "https://api.github.com/user"
    #    }},
    "test" =>
      {Cadet.Auth.Providers.Config,
       [
         %{
           token: "admin_token",
           code: "admin_code",
           name: "Test Admin",
           username: "admin",
           role: :admin
         },
         %{
           token: "staff_token",
           code: "staff_code",
           name: "Test Staff",
           username: "staff",
           role: :staff
         },
         %{
           token: "student_token",
           code: "student_code",
           name: "Test Student",
           username: "student",
           role: :student
         }
       ]}
  },
  # See https://hexdocs.pm/openid_connect/readme.html
  # openid_connect_providers: [
  #   cognito: [
  #     discovery_document_uri: "",
  #     client_id: "",
  #     client_secret: "",
  #     response_type: "code",
  #     scope: "openid profile"
  #   ]
  # ],
  autograder: [
    lambda_name: "autograderLambdaName"
  ],
  uploader: [
    assets_bucket: "source-academy-assets",
    assets_prefix: "courses-dev/",
    sourcecasts_bucket: "env-cadet-sourcecasts"
  ],
  # Configuration for Sling integration (executing on remote devices)
  remote_execution: [
    # Prefix for AWS IoT thing names
    thing_prefix: "env-sling",
    # AWS IoT thing group to put created things into (must be set-up beforehand)
    thing_group: "env-sling",
    # Role ARN to use when generating signed client MQTT-WS URLs (must be set-up beforehand)
    client_role_arn: "arn:aws:iam::12345678:role/env-cadet-frontend"
    # MQTT endpoint address for sling on the remote device to connect to
    # endpoint_address: "hostname:port"
    # WebSockets endpoint for sling on the frontend to connect to
    # ws_endpoint_address: "ws://hostname:port"
  ]

  config :openai,
  # find it at https://platform.openai.com/account/api-keys
  api_key: "the actual api key",
  # For source academy deployment, leave this as empty string.Ingeneral could find it at https://platform.openai.com/account/org-settings under "Organization ID". 
  organization_key: "",
  # optional, passed to [HTTPoison.Request](https://hexdocs.pm/httpoison/HTTPoison.Request.html) options
  http_options: [recv_timeout: 170_0000]

config :sentry,
  dsn: "https://public_key/sentry.io/somethingsomething"
