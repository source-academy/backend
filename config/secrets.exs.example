import Config

config :cadet,
  identity_providers: %{
    # If you are just doing development, you can simply use the test provider
    # below. You only need to use LumiNUS or OpenID if you are deploying to
    # production.

    # # To use authentication with LumiNUS.
    # "nusnet_id" =>
    #   {Cadet.Auth.Providers.LumiNUS,
    #    %{
    #      # The LumiNUS API key
    #      api_key: "",
    #      # The module code to check for enrolment.
    #      module_code: "CS1101S"
    #    }},
    # # An example of OpenID authentication with Cognito. Any OpenID-compliant
    # # provider should work.
    # "cognito" =>
    #   {Cadet.Auth.Providers.OpenID,
    #    %{
    #      # This should match a key in openid_connect_providers below
    #      openid_provider: :cognito,
    #      # You may need to write your own claim extractor for other providers
    #      claim_extractor: Cadet.Auth.Providers.CognitoClaimExtractor
    #    }},
    "test" =>
      {Cadet.Auth.Providers.Config,
       [
         %{
           token: "admin_token",
           code: "admin_code",
           name: "Test Admin",
           username: "admin",
           role: :admin
         },
         %{
           token: "staff_token",
           code: "staff_code",
           name: "Test Staff",
           username: "staff",
           role: :staff
         },
         %{
           token: "student_token",
           code: "student_code",
           name: "Test Student",
           username: "student",
           role: :student
         }
       ]}
  },
  # See https://hexdocs.pm/openid_connect/readme.html
  # openid_connect_providers: [
  #   cognito: [
  #     discovery_document_uri: "",
  #     client_id: "",
  #     client_secret: "",
  #     response_type: "code",
  #     scope: "openid profile"
  #   ]
  # ],
  autograder: [
    lambda_name: "autograderLambdaName"
  ],
  uploader: [
    assets_bucket: "source-academy-assets",
    sourcecasts_bucket: "env-cadet-sourcecasts"
  ]

config :sentry,
  dsn: "https://public_key/sentry.io/somethingsomething"
